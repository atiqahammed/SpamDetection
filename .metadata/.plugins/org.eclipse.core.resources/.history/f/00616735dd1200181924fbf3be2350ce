package detector;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Random;

public class SpamDetector {
	private double TP;
	private double FP;
	private double TN;
	private double FN;
	private int column;
	private int totalHam;
	private double recall;
	private File dataFile;
	private int totalSpam;
	private double F1score;
	private double accuracy;
	private double precision;
	private FileReader fileReader;
	private ArrayList<Data> testingData;
	private ArrayList<Data> trainingData;
	private BufferedReader bufferedReader;
	private ArrayList<Data> hamCollection;
	private ArrayList<Data> spamCollection;
	private ArrayList<Integer> allTestedHam;
	private ArrayList<Integer> allTestedSpam;
	private Map<String, ArrayList<Data>> listMap;
	
	public SpamDetector(String filePath) {
		dataFile = new File(filePath);
	}

	public void inputData() {
		initializeDataStructure();
		String s = null;
		try {
			while ((s = bufferedReader.readLine()) != null) {
				String data[] = s.split(",");
				listMap.get(data[data.length - 1]).add(new Data(data));
			}
			totalHam = (hamCollection.size()/10)*9;
			totalSpam = (spamCollection.size()/10)*9;

		} catch (IOException e) {
			System.out.println("got error in reading data using bufferReader");
		}
	}

	private void initializeDataStructure() {
		spamCollection = new ArrayList<Data>();
		hamCollection = new ArrayList<Data>();
		listMap = new HashMap<String, ArrayList<Data>>();
		listMap.put("1", spamCollection);
		listMap.put("0", hamCollection);
			
		try {
			fileReader = new FileReader(dataFile);
		} catch (FileNotFoundException e) {
			System.out.println("file not Found");
		}
		bufferedReader = new BufferedReader(fileReader);
	}

	public void test() {
		allTestedHam = new ArrayList<>();
		allTestedSpam = new ArrayList<>();
		crossValidation();
		result();
	}

	private void result() {
		accuracy = accuracy = (TP + TN) / (TP + TN + FP + FN);
		precision = TP / (TP+FP);
		recall = TP / (TP+FN); 	 
		F1score = (2*precision*recall)  / (precision + recall);
		
		System.err.println("Total TRUE-POSITIVE   : "+ TP);
		System.err.println("Total TRUE-NEGATIVE   : "+ TN);
		System.err.println("Total FALSE-POSITIVE  : "+ FP);
		System.err.println("Total FALSE-NEGATIVE  : "+ FN);
		System.out.println("-------------------------------------");
		System.err.println("Accuracy              : "+ accuracy);
		System.err.println("precision             : "+ precision);
		System.err.println("recall                : "+ recall);
		System.err.println("F1 score              : "+ F1score);
	}

	private void crossValidation() {
		for(int i = 0; i < 10; i++){
			System.out.println("validaion no " + i+1 + " is processing");
			trainingData = new ArrayList<>();
			testingData = new ArrayList<>();
			selectRandomTrainData(allTestedHam, hamCollection);
			selectRandomTrainData(allTestedSpam, spamCollection);
			classify();
		}	
	}

	private void classify() {
		column = testingData.get(0).getColumnSize();
		for(int i = 0; i < testingData.size(); i++) {
			Data temp = testingData.get(i);
			String s = predect(temp);
			if(temp.getValueInIndex(column - 1).equals("1") && s.equals("1")) TP++;
			if(temp.getValueInIndex(column - 1).equals("1") && s.equals("0")) FN++;
			if(temp.getValueInIndex(column - 1).equals("0") && s.equals("0")) TN++;
			if(temp.getValueInIndex(column - 1).equals("0") && s.equals("1")) FP++;
		}
	}
	
	private String predect(Data data) {
		double probabilityOfSpamGivenFeatures = 1.0;
		double probabilityOfHamGivenFeatures = 1.0;
		for(int j = 0; j < column; j++) {
			int countOfValue[] = countAttributeValue(data.getValueInIndex(j), j);
			probabilityOfHamGivenFeatures *= (double)countOfValue[0]/totalHam;
			probabilityOfSpamGivenFeatures *= (double)countOfValue[1]/totalSpam;
		}
		if(probabilityOfHamGivenFeatures > probabilityOfSpamGivenFeatures) return "0";
		return "1";
	}

	private int[] countAttributeValue(String string, int index) {
		int []arr = new int[2];
		arr[0] = 0;
		arr[1] = 0;
		for(int i = 0; i < trainingData.size(); i++) {
			if(trainingData.get(i).getValueInIndex(index).equals(string) && trainingData.get(i).getValueInIndex(column-1).equals("1"))arr[1]++;
			if(trainingData.get(i).getValueInIndex(index).equals(string) && trainingData.get(i).getValueInIndex(column-1).equals("0"))arr[0]++;
		}
		
		if(arr[0] == 0) arr[0] = 1;
		if(arr[1] == 0) arr[1] = 1;
		return arr;
	}

	private void selectRandomTrainData(ArrayList<Integer> allTested, ArrayList<Data> dataList) {
		ArrayList<Integer> temp = new ArrayList<>();
		while(temp.size() < dataList.size()/10-9){
			int x = new Random().nextInt(dataList.size());
			if(!allTested.contains(x)) {
				temp.add(x);
				allTested.add(x);
			}
		}

		for(int i = 0; i < dataList.size(); i++) {
			if(temp.contains(i)) testingData.add(dataList.get(i));
			else trainingData.add(dataList.get(i));
		}		
	}
}
